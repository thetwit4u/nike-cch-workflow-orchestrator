import json
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

class CdkOutputsParser:
    """
    Parses the cdk-outputs.json file generated by a CDK deployment.

    This utility provides a simple way to access the output variables from the
    CDK stack, such as S3 bucket names, API endpoints, or SQS queue URLs,
    which are needed to configure the test clients.
    """

    def __init__(self, cdk_dir: str = "workflow-orchestrator/cdk"):
        """
        Initializes the parser.

        Args:
            cdk_dir: The relative path to the directory containing cdk-outputs.json.
        """
        self.outputs_path = Path(cdk_dir).resolve() / "cdk-outputs.json"
        self._outputs = None

    def _load_outputs(self):
        """Loads and parses the JSON output file."""
        if not self.outputs_path.exists():
            raise FileNotFoundError(
                f"CDK output file not found at {self.outputs_path}. "
                "Ensure the CDK stack has been deployed with the --outputs-file flag."
            )
        
        logger.info(f"Loading CDK outputs from {self.outputs_path}")
        with open(self.outputs_path, 'r') as f:
            # The JSON file contains a single top-level object where keys are
            # in the format 'StackName.OutputKey'. We parse this into a more
            # easily accessible nested dictionary.
            raw_outputs = json.load(f)
            self._outputs = {}
            for key, value in raw_outputs.items():
                if '.' in key:
                    stack_name, output_key = key.split('.', 1)
                    if stack_name not in self._outputs:
                        self._outputs[stack_name] = {}
                    self._outputs[stack_name][output_key] = value
                else:
                    self._outputs[key] = value
        logger.info("Successfully loaded and parsed CDK outputs.")

    def get_output(self, stack_name: str, key: str) -> str:
        """
        Retrieves a specific output value from a specific stack.

        Args:
            stack_name: The name of the CDK stack.
            key: The output key to retrieve.

        Returns:
            The value of the output variable.
            
        Raises:
            KeyError: If the stack or key is not found.
        """
        if self._outputs is None:
            self._load_outputs()
        
        try:
            return self._outputs[stack_name][key]
        except KeyError:
            logger.error(f"Output key '{key}' not found in stack '{stack_name}'.")
            logger.error(f"Available outputs: {json.dumps(self._outputs, indent=2)}")
            raise

    def get_all_outputs(self) -> dict:
        """
        Returns all parsed outputs.

        Returns:
            A nested dictionary of all stack outputs.
        """
        if self._outputs is None:
            self._load_outputs()
        return self._outputs 