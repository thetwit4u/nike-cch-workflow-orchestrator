schema_version: "1.1.1" # Updated version reflecting new node types
workflow_name: "Import US Workflow"
workflow_id: "import_us_v1"
entry_point: Check_Filing_Pack_Creation_Started

initial_context:
  - deliverySetId
  - deliverySetURI

nodes:
  # Check if this process has already been scheduled to avoid unnecessary processing
  Check_Filing_Pack_Creation_Started:
    type: condition
    title: "Check if Filing Pack Creation is Already Scheduled"
    condition_on_key: "filingpackCreationStarted"
    branches:
      "true": Log_Error_Already_Started
      "false": Retrieve_Planned_Discharge_Date
      "_default": Retrieve_Planned_Discharge_Date # Treat null/missing as false

  # Retrieve discharge date from DeliverySet Model
  Retrieve_Planned_Discharge_Date:
    type: library_call
    title: "Retrieve Planned Discharge Date for OTF"
    library_function_id: "s3#read_jsonpath"
    parameters:
      input_s3_uri_key: "deliverySetURI"
      jsonpath_expression: "$.consignments[0].plannedDischargeDate"
    output_key: "plannedDischargeDate"
    on_success: Calculate_OTF_Date
    on_failure: Handle_Error

  # Calculate the new target date
  Calculate_OTF_Date:
    type: library_call
    title: "Calculate Optimal Time of Filing (OTF)"
    library_function_id: "core#calculate_timedelta"
    parameters:
      date_context_key: "plannedDischargeDate"
      timedelta:
        days: -10
    output_key: "currentOtfDate"
    on_success: Set_Schedule_OTF_Date # Directly proceed to schedule/reschedule
    on_failure: Handle_Error

  # Schedule (or reschedule) the filing pack creation. The old schedule is overridden automatically.
  Set_Schedule_OTF_Date:
    type: scheduled_request
    title: "Set/Update Schedule for Optimal Time of Filing (OTF)"
    description: "Schedules (or reschedules) the start of filing pack creation using the new OTF date. The existing schedule will be overridden."
    capability_id: "import#create_filingpacks"
    input_keys: ["deliverySetURI"]
    schedule_parameters:
      date_context_key: "currentOtfDate"
    on_schedule_set:
      filingpackCreationStarted: true
    request_output_keys:
      - filingPacksStatus
      - filingPacksError
      - importFilingPacks
      - deliverySetImportEnrichedURI
    on_response: Check_Start_Import_Filing_Result # Go directly to check the result
    on_success: End_Workflow
    on_failure: Handle_Error

  # This node is the entry point after the scheduled task has run
  # Check the result of the filing pack submission
  Check_Start_Import_Filing_Result:
    type: condition
    title: "Check Start Import Filing Result"
    # This node would check a status key set by 'Start_Filing_Pack_Processing'
    condition_on_key: "filingPacksStatus" 
    branches:
      "CREATED": Start_Parallel_Monitoring
      "_default": Import_Filing_Pack_Creation_Error

  # This is the map_fork for all filing packs
  Start_Parallel_Monitoring:
    type: map_fork
    title: "Start Parallel Monitoring for Each Filing Pack"
    input_list_key: "importFilingPacks" # Iterate over this list in context
    branch_key: "filingPackId" # Use this key from each item to identify the branch
    branch_entry_node: Submit_Single_Filing_Pack

  # --- Start of the sub-workflow for a single filing pack ---
  Submit_Single_Filing_Pack:
    type: async_request
    title: "Declaration Communicator : Start Import Filing"
    capability_id: "declaration_communicator#submit_import"
    input_keys: ["current_map_item"]
    request_output_keys: ["submitStatus", "submitError"]
    on_response: Check_Submit_Success # Go directly to check the result
    on_failure: Handle_Error

  Check_Submit_Success:
    type: condition
    title: "Check if Submission was Successful"
    condition_on_key: "submitStatus"
    branches:
      "SUBMITTED": Wait_For_Parallel_Updates # Correct path
      "_default": Log_Submit_Error

  Wait_For_Parallel_Updates:
    type: fork
    title: "Wait for Status and Entry Updates"
    branches:
      - Wait_for_Customs_Status
      - Wait_For_Customs_Entry

  # Customs Status Updates Branch
  Wait_for_Customs_Status:
    type: event_wait
    title: "Wait for Customs Status Update"
    event_key: "customsStatus" # Waits for an event to update this key in the branch context
    on_event: Check_Customs_Status

  Check_Customs_Status:
    type: condition
    title: "Check if Status is Released"
    condition_on_key: "customsStatus"
    branches:
      "RELEASED": Status_Released_Complete
      "ERROR": Log_Customs_Status_Error
      "_default": Wait_for_Customs_Status # Loop back to wait for the next status update

  Status_Released_Complete:
    type: end_branch
    title: "Customs Status Branch Complete"

  # Customs Entry Updates Branch
  Wait_For_Customs_Entry:
    type: event_wait
    title: "Wait for Customs Entry Update"
    event_key: "customsEntryStatus"
    on_event: Check_Customs_Entry

  Check_Customs_Entry:
    type: condition
    title: "Check if Entry is Received"
    condition_on_key: "customsEntryStatus"
    branches:
      "RECEIVED": Entry_Received_Complete
      "ERROR": Log_Customs_Entry_Error
      "_default": Wait_For_Customs_Entry

  Entry_Received_Complete:
    type: end_branch
    title: "Customs Entry Branch Complete"
  
  # --- End of sub-workflow branches ---

  # This join waits for both the Status and Entry branches to complete *for a single filing pack*
  Join_Status_and_Entry:
    type: join
    title: "Join Status and Entry"
    join_branches:
      - Status_Released_Complete
      - Entry_Received_Complete
    on_success: Single_Filing_Pack_Complete

  Single_Filing_Pack_Complete:
    type: end_branch
    title: "Single Filing Pack Processing Complete"

  # --- End of the sub-workflow ---

  # This is the main join for the map_fork
  Join_All_Filing_Packs:
    type: join
    title: "Join All Filing Pack Branches"
    join_branches:
      - Start_Parallel_Monitoring # The name of the map_fork node
    on_success: Finalize_Workflow
    on_failure: Handle_Error

  Finalize_Workflow:
    type: async_request
    title: "Notify DeliverySet Customs Released"
    capability_id: "declaration_communicator#customs_released"
    output_keys: ["deliverySetCustomsReleasedURI", "deliverySetCustomsReleasedStatus", "deliverySetCustomsReleasedError"]
    on_response: End_Workflow # End after we get the final response

  # --- Generic Error Handling ---
  Log_Error_Already_Started:
    type: log_error
    title: "Log Error: Already Started"
    default_error_code: "OTF-001"
    default_message: "Filing pack creation process was already started for this workflow."
    on_success: End_Workflow

  Import_Filing_Pack_Creation_Error:
    type: log_error
    title: "Log Error: Import Filing Pack Creation Failed"
    default_error_code: "OTF-002"
    message_from_context_key: "filingPacksError"
    default_message: "Failed to create or submit import filing packs."
    on_success: End_Workflow
    
  Log_Submit_Error:
    type: log_error
    title: "Log Error: Filing Pack Submission Failed"
    default_error_code: "SUBMIT-001"
    message_from_context_key: "submitError"
    default_message: "The Declaration Communicator failed to submit the filing pack."
    on_success: Handle_Error # Go to general error handler

  Log_Customs_Status_Error:
    type: log_error
    title: "Log Error: Customs Status Update Failed"
    default_error_code: "OTF-003"
    message_from_context_key: "customsError"
    default_message: "An error occurred while processing a customs status update."
    on_success: Handle_Error

  Log_Customs_Entry_Error:
    type: log_error
    title: "Log Error: Customs Entry Update Failed"
    default_error_code: "OTF-004"
    message_from_context_key: "customsEntryError"
    default_message: "An error occurred while processing a customs entry update."
    on_success: Handle_Error

  Handle_Error:
    type: log_error
    title: "Generic Error Handler"
    default_error_code: "GEN-001"
    message_from_context_key: "_internalError"
    default_message: "A general error occurred in the workflow."
    on_success: End_Workflow

  End_Workflow:
    type: end
    title: "End Workflow"